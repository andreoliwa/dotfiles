#!/usr/bin/env python3
import argparse
import os
import sys
from subprocess import run, PIPE
from pathlib import Path

def main():
    # https://docs.ansible.com/ansible/latest/user_guide/playbooks_debugger.html
    os.environ['ANSIBLE_ENABLE_TASK_DEBUGGER'] = 'True'

    parser = argparse.ArgumentParser(description="run ansible-playbook to setup a similar dev machine in multiple operating systems")
    parser.add_argument("-g", "--galaxy", action="store_true", help="install Ansible Galaxy roles")
    parser.add_argument("-b", "--bootstrap", action="store_true", help="bootstrap the dev machine")
    parser.add_argument("tag", nargs="*", help="ansible role tag")
    args = parser.parse_args()

    # Change dir to read the correct ansible.cfg
    os.chdir(Path('~/dotfiles').expanduser())

    if args.galaxy:
        print("Installing Galaxy roles...")
        run("ansible-galaxy install -r ~/dotfiles/galaxy_roles.yml --roles-path ~/dotfiles/roles_galaxy", shell=True)

    if args.bootstrap:
        print("Setting up local dev environment...")
        run("ansible-playbook -i ~/dotfiles/hosts ~/dotfiles/local_env.yml --ask-become-pass $*", shell=True)
        notify("Bootstrap", "set up")
    else:
        # Always ask sudo password under Linux, it is needed for several roles
        ask_password = " --ask-become-pass" if sys.platform == 'linux' else ""
        tags = " --tags {}".format(','.join(args.tag)) if args.tag else ""
            
        print("Updating local dev environment... {}".format(tags))
        # Run all roles except for the ones tagged with 'bootstrap'
        run('ansible-playbook -i ~/dotfiles/hosts ~/dotfiles/local_env.yml --skip-tags "bootstrap"{}{}'.format(ask_password, tags), shell=True)

        notify("Update", "updated")

def notify(title, message):
    """If terminal-notifier is installed, use it to display a notification."""
    terminal_notifier_path = run("command -v terminal-notifier", check=True, shell=True, stdout=PIPE).stdout.strip().decode()
    if terminal_notifier_path:
        run('terminal-notifier -title "{}: {} complete" -message "Successfully {} dev environment."'.format(Path(__file__).name, title, message), shell=True)


if __name__ == "__main__":
    main()
