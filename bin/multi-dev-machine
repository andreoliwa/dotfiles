#!/usr/bin/env python3
"""Setup a similar development environment in multiple operating systems."""
import argparse
import os
import sys
from pathlib import Path
from subprocess import PIPE, CalledProcessError, run


def shell(command_line, quiet=False, return_lines=False, **kwargs):
    """Print and run a shell command."""
    if not quiet:
        print("$ {}".format(command_line))
    if return_lines:
        kwargs.setdefault("stdout", PIPE)

    completed_process = run(command_line, shell=True, universal_newlines=True, **kwargs)
    if not return_lines:
        return completed_process

    stdout = completed_process.stdout.strip().strip("\n")
    return stdout.split("\n") if stdout else []


def notify(title, message):
    """If terminal-notifier is installed, use it to display a notification."""
    check = "which" if sys.platform == "linux" else "command -v"
    try:
        terminal_notifier_path = shell("{} terminal-notifier".format(check), check=True, stdout=PIPE).stdout.strip()
    except CalledProcessError:
        terminal_notifier_path = ""
    if terminal_notifier_path:
        shell(
            'terminal-notifier -title "{}: {} complete" -message "Successfully {} dev environment."'.format(
                Path(__file__).name, title, message
            )
        )


def main():
    """Main function."""
    parser = argparse.ArgumentParser(
        description="run an Ansible playbook to setup a similar dev machine in multiple operating systems"
    )
    parser.add_argument(
        "--task", "-t", dest="task", metavar="START_AT_TASK", help="start the playbook at this task",
    )
    parser.add_argument("--debug", "-d", action="store_true", help="debug mode")
    parser.add_argument("--galaxy", "-g", action="store_true", help="install Ansible Galaxy roles")
    parser.add_argument("--bootstrap", "-b", action="store_true", help="bootstrap the dev machine")
    parser.add_argument("--status", "-s", action="store_true", help="display status of Vagrant VMs")
    parser.add_argument(
        "--provision",
        "-p",
        dest="virtual_machine",
        metavar="VIRTUAL MACHINE",
        help="provision a Vagrant virtual machine",
    )
    parser.add_argument("--reload", "-r", action="store_true", help="reload the VM")
    parser.add_argument(
        "--gui",
        "--ui",
        "-u",
        action="store_true",
        help="start the VM with a GUI (to change the GUI you need to --reload/-r the VM)",
    )
    parser.add_argument("--verbose", "-v", action="count", help="verbose mode (-v, -vv, -vvv...)")
    parser.add_argument("--sudo", action="store_true", help="ask become password (required for some roles)")
    parser.add_argument("--rpi", action="store_true", help="setup the Raspberry Pi")
    parser.add_argument("tag", nargs="*", help="ansible role tag")
    args = parser.parse_args()

    # Change dir to read the correct ansible.cfg
    os.chdir(str(Path.home() / "dotfiles"))

    if args.status:
        shell("vagrant status {}".format(args.virtual_machine or ""))
        return

    # https://docs.ansible.com/ansible/latest/user_guide/playbooks_debugger.html
    # Debugging doesn't work on a Vagrant VM; so let's set an environment variable
    # instead of setting this directly into the playbook file.
    os.environ["ANSIBLE_ENABLE_TASK_DEBUGGER"] = str(args.debug)

    if args.galaxy:
        print("Installing Galaxy roles...")
        shell("ansible-galaxy install -r ~/dotfiles/galaxy_roles.yml --roles-path ~/dotfiles/roles_galaxy")

    if args.gui:
        os.environ["MULTI_DEV_MACHINE_GUI"] = "True"

    verbose_option = " -{}".format("v" * args.verbose) if args.verbose else ""
    if verbose_option:
        os.environ["MULTI_DEV_MACHINE_VERBOSE"] = verbose_option.strip()

    tags_with_comma = ",".join(args.tag)
    tags_option = " --tags {}".format(tags_with_comma) if args.tag else ""
    if tags_with_comma:
        os.environ["MULTI_DEV_MACHINE_TAGS"] = tags_with_comma  # This variable is used on the Vagrantfile

    playbook_file = "raspberry_pi" if args.rpi else "local"
    command_parts = [
        "ansible-playbook",
        # https://docs.ansible.com/ansible/latest/user_guide/vault.html#providing-vault-passwords
        "--vault-id dotfiles@~/.config/dotfiles/vault_password.txt",
        "--inventory ~/dotfiles/hosts",
        "~/dotfiles/playbook_{}.yml".format(playbook_file),
    ]

    if args.task:
        fzf_parts = command_parts.copy()
        fzf_parts.extend(
            [
                "--list-tasks",
                "2>/dev/null",
                "| tail -n +6",
                "| fzf --select-1 --exit-0 --height=20% --cycle",
                "--query={!r}".format(args.task),
            ]
        )
        selected = shell(" ".join(fzf_parts), quiet=True, return_lines=True)
        if not selected:
            print("No task was chosen")
            sys.exit(-1)
        role_task = selected[0].split("\t")[0]
        chosen_task = role_task.split(":", 1)[1].strip()
        command_parts.append("--start-at-task {!r}".format(chosen_task))

    playbook_command = " ".join(command_parts)
    if args.virtual_machine:
        print("Provisioning the Vagrant virtual machine {}...".format(args.virtual_machine))
        if args.reload:
            shell("vagrant reload {}".format(args.virtual_machine))
            up_command = ""
        else:
            output = shell("vagrant status {}".format(args.virtual_machine), stdout=PIPE).stdout.strip()
            lines = output.split("\n")
            if len(lines) < 3:
                return
            up_command = "up --" if " running " not in lines[2] else ""
        shell("vagrant {}provision {}".format(up_command, args.virtual_machine))
        notify("Vagrant provision", "provisioned")
    elif args.bootstrap:
        print("Setting up local dev environment...{}".format(tags_option))
        shell("{} --ask-become-pass{}{}".format(playbook_command, verbose_option, tags_option))
        notify("Bootstrap", "set up")
    else:
        # Always ask sudo password under Linux even on update; it is needed for several roles
        ask_password_option = " --ask-become-pass" if sys.platform == "linux" or args.sudo else ""

        print("Updating local dev environment...{}".format(tags_option))
        # Run all roles except for the ones tagged with 'bootstrap'
        shell(
            "{} --skip-tags 'bootstrap'{}{}{}".format(
                playbook_command, verbose_option, ask_password_option, tags_option
            )
        )
        notify("Update", "updated")


if __name__ == "__main__":
    main()
