#!/usr/bin/env python3
"""PostgreSQL helper tools like backup, restore, user creation, etc."""
import argparse
from pathlib import Path

from dotfiles_utils import PostgreSQLServer, existing_directory_type, existing_file_type, shell


def backup(parser, args):
    """Backup PostgreSQL databases."""
    pg = PostgreSQLServer(args.server_uri).list_databases()
    for database in pg.databases:
        sql_file: Path = Path(args.backup_dir) / f"{pg.protocol}_{pg.server}" / f"{database}.sql"
        sql_file.parent.mkdir(parents=True, exist_ok=True)
        shell(f"pg_dump --clean --create --if-exists --file={sql_file} {args.server_uri}/{database}")


def restore(parser, args):
    """Restore PostgreSQL databases."""
    pg = PostgreSQLServer(args.server_uri).list_databases()
    new_database = args.database_name or args.sql_file.stem
    if new_database in pg.databases:
        print(f"The database {new_database!r} already exists in the server. Provide a new database name.")
        exit(1)

    if new_database != args.sql_file.stem:
        # TODO Optional argument --owner to set the database owner
        print(f"TODO: Create a user named {new_database!r} if it doesn't exist (or raise an error)")
        print(f"TODO: Parse the .sql file and replace DATABASE/OWNER {args.sql_file.stem!r} by {new_database!r}")
        exit(2)

    shell(f"psql {args.server_uri} < {args.sql_file}")


def main():
    """Main function."""
    parser = argparse.ArgumentParser(description="PostgreSQL helper tools")
    parser.add_argument("server_uri", help="database server URI (postgresql://user:password@server:port)")
    parser.set_defaults(chosen_function=None)
    subparsers = parser.add_subparsers(title="commands")

    parser_backup = subparsers.add_parser("backup", help="backup a PostgreSQL database to a SQL file")
    parser_backup.add_argument("backup_dir", type=existing_directory_type, help="directory to store the backups")
    parser_backup.set_defaults(chosen_function=backup)

    parser_restore = subparsers.add_parser("restore", help="restore a PostgreSQL database from a SQL file")
    parser_restore.add_argument(
        "sql_file", type=existing_file_type, help="full path of the .sql file created by the 'backup' command"
    )
    parser_restore.add_argument("database_name", nargs="?", help="database name (default: basename of .sql file)")
    parser_restore.set_defaults(chosen_function=restore)

    args = parser.parse_args()
    if not args.chosen_function:
        parser.print_help()
        return
    args.chosen_function(parser, args)
    return


if __name__ == "__main__":
    main()
