#!/bin/sh
"exec" "$HOME/.pyenv/versions/tools3/bin/python" "$0" "$@"
"""Extra commands for py.test."""
import os
import re
from typing import Tuple

import click
from requests_html import HTMLSession

from dotfiles_utils import shell

# Possible formats for tests:
# ___ test_name ___
# ___ Error on setup of test_name ___
# ___ test_name[Parameter] ___
TEST_REGEX = re.compile(r"___ .*(test[^\[\] ]+)[\[\]A-Za-z]* ___")


@click.group()
def extra():
    """Extra commands for py.test."""
    pass


@extra.command()
@click.option("-f", "--result-file", type=click.File())
@click.option("-j", "--jenkins-url", multiple=True)
@click.option("-s", "dont_capture", flag_value='-s', help="Don't capture output")
@click.pass_context
def results(ctx, result_file, jenkins_url: Tuple[str, ...], dont_capture):
    """Parse a file with the output of failed tests, then re-run only those failed tests."""
    if result_file:
        contents = result_file.read()
    elif jenkins_url:
        responses = []
        for url in set(jenkins_url):
            request = HTMLSession().get(url, auth=(os.environ["JENKINS_USERNAME"], os.environ["JENKINS_PASSWORD"]))
            responses.append(request.html.html)
        contents = '\n'.join(responses)
    else:
        click.echo(ctx.get_help())
        return

    all_tests = set(TEST_REGEX.findall(contents))
    expression = " or ".join(all_tests)
    if not dont_capture:
        dont_capture = ""
    shell(f"pytest -vv {dont_capture} -k '{expression}'")


if __name__ == "__main__":
    extra()
