[hub]
        protocol = https
[user]
        name = {{ git_personal.user_name }}
        email = {{ git_personal.user_email }}
        signingkey = {{ git_personal.user_signingkey }}
{% if ansible_os_family == 'Darwin' %}
[credential]
        helper = osxkeychain
{% endif %}
[alias]
        a = add
        st = status
        s = status
        co = checkout
        cob = checkout -b
        c = checkout
        ci = commit
        noff = merge --no-ff
        plr = pull --rebase
        amend = commit --amend
        wip = commit --no-verify -am "WIP"
        br = branch
        # diff-so-fancy
        # https://github.com/so-fancy/diff-so-fancy/#usage
        df = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git diff --color \"$@\" | diff-so-fancy  | less --tabs=4 -RFX; }; f"
        dfs = df --staged
        # Get changes for a single commit
        dfc = "!dfc() { git df $1^ $1; }; dfc"

        please = push --force-with-lease
        # publish current branch
        publish = "!f() { git push -u ${1:-origin} $(git rev-parse --abbrev-ref HEAD); }; f"
        # Alias to use gitup on gita: gita super up
        up = "!gitup -p ."

        # http://gggritso.com/human-git-aliases
        unstage = reset -q HEAD --
        discard = checkout --
        uncommit = reset --mixed HEAD~

        l = log --graph --decorate --oneline --abbrev-commit --all
        h = log --graph --decorate --oneline --abbrev-commit

        # https://martinheinz.dev/blog/43
        # Python's ConfigParser can't read multiline strings with \ and -
        graph = log --graph --abbrev-commit --decorate --all --format=format:'%C(bold blue)%h%C(reset) %C(bold cyan)%aD%C(dim white) %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)'

        issues = !hub browse -- issues
        url = "!f() { sha=$(git rev-parse ${1:-HEAD}); hub browse -u -- commit/$sha; }; f"
        # Copy current branch name to clipboard (macOS only)
        # Commenting this because I'm not using it and it breaks git-filter-repo
        #cb = "!git rev-parse --abbrev-ref HEAD | tr -d '\n' | pbcopy"

        remote-branches = "!f() { git ls-remote --heads ${1:origin} | sed 's?.*refs/heads/??'; }; f "

        # Git flow
        feature = flow feature start
        finfeature = flow feature finish
        fix = flow hotfix start
        finfix = flow hotfix finish
        release = flow release start
        finrelease = flow release finish

        sub = submodule
[color]
        diff = auto
        status = auto
        branch = auto
        ui = true
[core]
        excludesfile = ~/.gitignore_global
        editor = vim
[apply]
        whitespace = nowarn

# https://yousseb.github.io/meld/
[diff]
    tool = meld
[difftool]
    prompt = false
[difftool "meld"]
    trustExitCode = true
    cmd = open -W -a Meld --args \"$LOCAL\" \"$REMOTE\"
[merge]
    tool = meld
[mergetool]
    prompt = false
# Using this doesn't work, the files don't open:
# [mergetool "meld"]
#     trustExitCode = true
#     cmd = open -W -a Meld --args --auto-merge \"$LOCAL\" \"$BASE\" \"$REMOTE\" --output=\"$MERGED\"

[push]
        # See `git help config` (search for push.default)
        # for more information on different options of the below setting.
        #
        # Setting to git 2.0 default to surpress warning message
        default = simple
        followTags = true
[github]
        user = {{ github_username }}
{% if git_personal.user_signingkey %}
[commit]
        gpgsign = true
[tag]
        gpgsign = true
{% endif %}

[gpg]
{% if ansible_os_family == 'Debian' %}
        program = gpg2
{% elif ansible_os_family == 'Darwin' %}
        # https://stackoverflow.com/questions/36941533/git-hub-desktop-on-mac-error-cannot-run-gpg-no-such-file-or-directory/37261769#37261769
        program = {{ mac_homebrew_prefix }}/bin/gpg
{% endif %}

[rerere]
        enabled = true
[init]
	defaultBranch = master
