# Don't install with Homebrew; it uses python@3.9 from the Homebrew dir,
# which is then used to install pipx modules
- name: "pipx: Install from GitHub with Python 3.8 https://github.com/pipxproject/pipx#install-pipx"
  command: "{{ pyenv_root }}/versions/{{ latest_python_3_8.stdout }}/bin/python3 -m pip install -U --user pipx"
  register: this_task
  changed_when: "'Requirement already up-to-date: pipx' not in this_task.stdout"

- name: "pipx: Ensure it's on $PATH"
  command: "pipx ensurepath"
  register: this_task
  changed_when: "'is already in PATH' not in this_task.stderr"

- name: "pipx: Install completion on .bashrc"
  blockinfile:
    path: ~/.bashrc
    marker: "# https://github.com/pipxproject/pipx#install-pipx {mark} ----------------------------------------------------------------"
    block: |
      # Taken from "pipx completions" command
      eval "$(register-python-argcomplete pipx)"

- name: "pipx: Remove common packages"
  with_items: "{{ python3_pipx_modules['remove'] }}"
  command: "pipx uninstall {{ item }}"
  register: result
  failed_when:
    - result.rc > 0
    - "'Nothing to uninstall for' not in result.stdout"

- name: "pipx: Remove packages on personal_laptop"
  with_items: "{{ python3_pipx_modules['company_laptop'] }}"
  command: "pipx uninstall {{ item }}"
  when: not ansible_env.COMPANY_LAPTOP and python3_pipx_modules['company_laptop']
  register: result
  failed_when:
    - result.rc > 0
    - "'Nothing to uninstall for' not in result.stdout"

- name: "pipx: Remove packages on company_laptop"
  with_items: "{{ python3_pipx_modules['personal_laptop'] }}"
  command: "pipx uninstall {{ item }}"
  when: ansible_env.COMPANY_LAPTOP and python3_pipx_modules['personal_laptop']
  register: result
  failed_when:
    - result.rc > 0
    - "'Nothing to uninstall for' not in result.stdout"

- name: "pipx: List invalid packages"
  shell: "pipx list | grep -e 'has invalid interpreter' -e 'has missing internal' | sed 's/^ *//g' | cut -d ' ' -f 2"
  register: pipx_invalid_packages

- name: "pipx: Remove invalid packages"
  with_items: "{{ pipx_invalid_packages.stdout_lines }}"
  command: "pipx uninstall {{ item }}"

- name: "pipx: Install common Python 3 modules globally with pipx"
  with_items: "{{ python3_pipx_modules['common'] }}"
  command: "pipx install --verbose {{ item }}"
  register: result
  failed_when:
    - result.rc > 0
    - "'Not installing to existing directory' not in result.stderr"
    - "'already seems to be installed' not in result.stdout"

- name: "pipx: Install packages on personal_laptop"
  with_items: "{{ python3_pipx_modules['personal_laptop'] }}"
  command: "pipx install --verbose {{ item }}"
  when: not ansible_env.COMPANY_LAPTOP and python3_pipx_modules['personal_laptop']
  register: result
  failed_when:
    - result.rc > 0
    - "'Not installing to existing directory' not in result.stderr"
    - "'already seems to be installed' not in result.stdout"

- name: "pipx: Install packages on company_laptop"
  with_items: "{{ python3_pipx_modules['company_laptop'] }}"
  command: "pipx install --verbose {{ item }}"
  when: ansible_env.COMPANY_LAPTOP and python3_pipx_modules['company_laptop']
  register: result
  failed_when:
    - result.rc > 0
    - "'Not installing to existing directory' not in result.stderr"
    - "'already seems to be installed' not in result.stdout"
