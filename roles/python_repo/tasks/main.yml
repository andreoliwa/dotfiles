- name: "{{ dir }}: git clone {{ repo }} {{ root }}{{ dir }} (update: {{ update }})"
  git:
    repo: "{{ repo }}"
    dest: "{{ root }}/{{ dir }}"
    clone: yes
    update: "{{ update }}"
    accept_hostkey: yes
  become: no

- name: "{{ dir }}: Set user name if defined"
  when: user_name != ''
  git_config:
    repo: "{{ root }}/{{ dir }}"
    scope: local
    state: present
    name: "user.name"
    value: "{{ user_name }}"

- name: "{{ dir }}: Set user email if defined"
  when: user_email != ''
  git_config:
    repo: "{{ root }}/{{ dir }}"
    scope: local
    state: present
    name: "user.email"
    value: "{{ user_email }}"

- name: Check if pyproject.toml exists in this repo
  stat:
    path: "{{ root }}/{{ dir }}/pyproject.toml"
  register: pyproject_toml

- name: Check if requirements.txt exists in this repo
  stat:
    path: "{{ root }}/{{ dir }}/requirements.txt"
  register: requirements_txt

- name: "{{ dir }}: Create a Poetry virtualenv for {{ env }} with Python {{ python_version }}"
  when: python_version != '' and pyproject_toml.stat.exists and not requirements_txt.stat.exists
  command: "poetry env use {{ pyenv_root }}/versions/{{ python_version }}/bin/python"
  args:
    chdir: "{{ root }}/{{ dir }}"

- name: "{{ dir }}: Check if the symlink directory exists"
  stat: path="{{ symlink_dir }}"
  register: symlink_dir_stat

- name: "{{ dir }}: Link dotted files"
  file:
    src: "{{ item }}"
    dest: "{{ root }}/{{ dir }}/{{ item | basename | splitext | first }}"
    state: link
    force: yes
  with_fileglob:
    - "{{ symlink_dir_stat.stat.path }}/.*.link"
  when: symlink_dir_stat.stat.exists and symlink_dir_stat.stat.isdir

- name: "{{ dir }}: Link regular files"
  file:
    src: "{{ item }}"
    dest: "{{ root }}/{{ dir }}/{{ item | basename | splitext | first }}"
    state: link
    force: yes
  with_fileglob:
    - "{{ symlink_dir_stat.stat.path }}/*.link"
  when: symlink_dir_stat.stat.exists and symlink_dir_stat.stat.isdir

- name: "{{ dir }}: Fill .envrc"
  when: python_version != ''
  blockinfile:
    path: "{{ root }}/{{ dir }}/.envrc"
    create: yes
    block: |
      export PYTHONWARNINGS=
      pyenv version

- name: "{{ dir }}: Fill .envrc for poetry"
  lineinfile:
    path: "{{ root }}/{{ dir }}/.envrc"
    state: present
    insertafter: EOF
    regexp: "poetry env"
    line: "poetry env info"
  when: python_version != '' and pyproject_toml.stat.exists and not requirements_txt.stat.exists

- name: "{{ dir }}: Allow .envrc"
  when: python_version != ''
  command: "direnv allow {{ root }}/{{ dir }}"
  changed_when: false

- name: "{{ dir }}: Remove .autoenv"
  when: python_version != ''
  file:
    path: "{{ root }}/{{ dir }}/.autoenv"
    state: absent

- name: "{{ dir }}: Remove .autoxsh"
  when: python_version != ''
  file:
    path: "{{ root }}/{{ dir }}/.autoxsh"
    state: absent

- name: "{{ dir }}: Remove .python-version"
  when: python_version != ''
  file:
    path: "{{ root }}/{{ dir }}/.python-version"
    state: absent
