- name: "{{ dir }}: git clone {{ repo }} {{ root }}/{{ dir }} (update: {{ update }})"
  git:
    repo: "{{ repo }}"
    dest: "{{ root }}/{{ dir }}"
    clone: yes
    update: "{{ update }}"
    accept_hostkey: yes
  become: no

- name: "{{ dir }}: Create virtualenv {{ env }} with Python {{ python_version }}"
  when: python_version != ''
  pyenv:
    subcommand: virtualenv
    version: "{{ python_version }}"
    virtualenv_name: "{{ env }}"

# TODO  localhost failed | msg: python-clitoolkit already exists but version differs

- name: "{{ dir }}: Update pip on virtualenv {{ env }}"
  when: python_version != ''
  pip:
    name: pip
    state: latest
    executable: "{{ pyenv_root }}/versions/{{ env }}/bin/pip"

- name: "{{ dir }}: Check if the symlink directory exists"
  stat: path="{{ symlink_dir }}"
  register: symlink_dir_stat

- name: "{{ dir }}: Link dotted files"
  file:
    src: "{{ item }}"
    dest: "{{ root }}/{{ dir }}/{{ item | basename | splitext | first }}"
    state: link
    force: yes
  with_fileglob:
    - "{{ symlink_dir_stat.stat.path }}/.*.link"
  when: symlink_dir_stat.stat.exists and symlink_dir_stat.stat.isdir

- name: "{{ dir }}: Link regular files"
  file:
    src: "{{ item }}"
    dest: "{{ root }}/{{ dir }}/{{ item | basename | splitext | first }}"
    state: link
    force: yes
  with_fileglob:
    - "{{ symlink_dir_stat.stat.path }}/*.link"
  when: symlink_dir_stat.stat.exists and symlink_dir_stat.stat.isdir

- name: "{{ dir }}: Add VIRTUAL_ENV variable to .autoenv file (useful for poetry/pipenv)"
  when: python_version != ''
  lineinfile:
    path: "{{ root }}/{{ dir }}/.autoenv"
    state: present
    create: yes
    regexp: "^.+ VIRTUAL_ENV="
    line: "export VIRTUAL_ENV={{ pyenv_root }}/versions/{{ env }}"

- name: "{{ dir }}: Add VIRTUAL_ENV variable to .autoxsh file (useful for poetry/pipenv)"
  when: python_version != ''
  lineinfile:
    path: "{{ root }}/{{ dir }}/.autoxsh"
    state: present
    create: yes
    regexp: "VIRTUAL_ENV = "
    line: "$VIRTUAL_ENV = p'{{ pyenv_root }}/versions/{{ env }}'"

- name: "{{ dir }}: Run if this fails: bash -c 'cd {{ root }}/{{ dir }} && pyenv local {{ env }} {{ local }}'"
  when: python_version != ''
# TODO pyenv local doesn't work yet with xonsh, it has to be run manually with bash if .python-version does not exist
#   shell: "bash -c 'eval \"$(pyenv init -)\" && cd {{ root }}/{{ dir }} && pyenv local {{ env }} {{ local }}'"
  shell: "pyenv local {{ env }} {{ local }}"
  args:
    executable: /bin/bash
    chdir: "{{ root }}/{{ dir }}"
    creates: "{{ root }}/{{ dir }}/.python-version"
  ignore_errors: true

- name: "{{ dir }}: Install modules on the virtualenv {{ env }} with '{{ install_command }}'? {{ run_install_command }}"
  when: run_install_command == 'yes' and python_version != '' and install_command != ''

  shell: "source ~/.pyenv/versions/{{ env }}/bin/activate && {{ install_command }}"
#   TODO pyenv commands are not working with the Ansible shell
#   localhost failed | msg: non-zero return code | stderr: 
# Failed to activate virtualenv.
# Perhaps pyenv-virtualenv has not been loaded into your shell properly.
# Please restart current shell and try again.
#   shell: "pyenv activate {{ env }} && {{ install_command }}"

  # Installation might fail, that's acceptable
  ignore_errors: true
  args:
    executable: /bin/bash
    chdir: "{{ root }}/{{ dir }}"
