- name: "{{ dir }} : git clone {{ repo }} {{ root }}/{{ dir }} (update: {{ update }})"
  git:
    repo: "{{ repo }}"
    dest: "{{ root }}/{{ dir }}"
    clone: yes
    update: "{{ update }}"
    accept_hostkey: yes
  become: no

- name: "{{ dir }} : Create virtualenv {{ env }} with Python {{ python_version }}"
  when: "python_version != ''"
  pyenv:
    subcommand: virtualenv
    version: "{{ python_version }}"
    virtualenv_name: "{{ env }}"

- name: "{{ dir }} : Update pip on virtualenv {{ env }}"
  when: "python_version != ''"
  pip:
    name: pip
    state: latest
    executable: "{{ pyenv_root }}/versions/{{ env }}/bin/pip"

- name: "{{ dir }} : Check if the symlink directory exists"
  stat: path="{{ symlink_dir }}"
  register: symlink_dir_stat

- name: "{{ dir }} : Link dotted files"
  file:
    src: "{{ item }}"
    dest: "{{ root }}/{{ dir }}/{{ item | basename | splitext | first }}"
    state: link
    force: yes
  with_fileglob:
    - "{{ symlink_dir_stat.stat.path }}/.*.link"
  when: symlink_dir_stat.stat.exists and symlink_dir_stat.stat.isdir

- name: "{{ dir }} : Link regular files"
  file:
    src: "{{ item }}"
    dest: "{{ root }}/{{ dir }}/{{ item | basename | splitext | first }}"
    state: link
    force: yes
  with_fileglob:
    - "{{ symlink_dir_stat.stat.path }}/*.link"
  when: symlink_dir_stat.stat.exists and symlink_dir_stat.stat.isdir

- name: "{{ dir }} : Add VIRTUAL_ENV variable to .autoenv file (useful for poetry/pipenv)"
  when: "python_version != ''"
  lineinfile:
    path: "{{ root }}/{{ dir }}/.autoenv"
    state: present
    create: yes
    regexp: "^.+ VIRTUAL_ENV="
    line: "export VIRTUAL_ENV={{ pyenv_root }}/versions/{{ env }}"

- name: "{{ dir }} : Add VIRTUAL_ENV variable to .autoxsh file (useful for poetry/pipenv)"
  when: "python_version != ''"
  lineinfile:
    path: "{{ root }}/{{ dir }}/.autoxsh"
    state: present
    create: yes
    regexp: "VIRTUAL_ENV = "
    line: "$VIRTUAL_ENV = p'{{ pyenv_root }}/versions/{{ env }}'"

# TODO pyenv local doesn't work yet with xonsh, it has to be run manually with bash if .python-version does not exist
- name: "{{ dir }} : Run if this fails: bash -c 'cd {{ root }}/{{ dir }} && pyenv local {{ env }} {{ local }}'"
  when: "python_version != ''"
  shell: "pyenv local {{ env }} {{ local }}"
  args:
    chdir: "{{ root }}/{{ dir }}"
    creates: "{{ root }}/{{ dir }}/.python-version"
    executable: /usr/local/bin/bash
  ignore_errors: true
