- name: "{{ dir }}: git clone {{ repo }} {{ root }}/{{ dir }} (update: {{ update }})"
  git:
    repo: "{{ repo }}"
    dest: "{{ root }}/{{ dir }}"
    clone: yes
    update: "{{ update }}"
    accept_hostkey: yes
  become: no

- name: "{{ dir }}: Create {{ env }} virtualenv with Python {{ python_version }}"
  when: python_version != ''
  pyenv:
    subcommand: virtualenv
    version: "{{ python_version }}"
    virtualenv_name: "{{ env }}"
  register: create_virtualenv
  ignore_errors: yes

- name: "{{ dir }}: Delete existing {{ env }} virtualenv links (Linux) [hack]"
  when: ansible_os_family != "Darwin" and python_version != '' and create_virtualenv.failed and "already exists but version differs" in create_virtualenv.msg
  command: "find ~/.pyenv/versions -type f,l -maxdepth 4 -name {{ env }} -print -delete"

- name: "{{ dir }}: Delete existing {{ env }} virtualenv links (Darwin) [hack]"
  when: ansible_os_family == "Darwin" and python_version != '' and create_virtualenv.failed and "already exists but version differs" in create_virtualenv.msg
  command: "find ~/.pyenv/versions -maxdepth 4 -name {{ env }} -print -delete"

- name: "{{ dir }}: Delete existing {{ env }} virtualenv directories [hack]"
  when: python_version != '' and create_virtualenv.failed and "already exists but version differs" in create_virtualenv.msg
  shell: "find ~/.pyenv/versions -maxdepth 4 -type d -name {{ env }} | xargs rm -rvf"

- name: "{{ dir }}: Recreate {{ env }} virtualenv with Python {{ python_version }}"
  when: python_version != '' and create_virtualenv.failed and "already exists but version differs" in create_virtualenv.msg
  pyenv:
    subcommand: virtualenv
    version: "{{ python_version }}"
    virtualenv_name: "{{ env }}"

- name: "{{ dir }}: Update pip on virtualenv {{ env }}"
  when: python_version != ''
  pip:
    name: pip
    state: latest
    executable: "{{ pyenv_root }}/versions/{{ env }}/bin/pip"

- name: "{{ dir }}: Check if the symlink directory exists"
  stat: path="{{ symlink_dir }}"
  register: symlink_dir_stat

- name: "{{ dir }}: Link dotted files"
  file:
    src: "{{ item }}"
    dest: "{{ root }}/{{ dir }}/{{ item | basename | splitext | first }}"
    state: link
    force: yes
  with_fileglob:
    - "{{ symlink_dir_stat.stat.path }}/.*.link"
  when: symlink_dir_stat.stat.exists and symlink_dir_stat.stat.isdir

- name: "{{ dir }}: Link regular files"
  file:
    src: "{{ item }}"
    dest: "{{ root }}/{{ dir }}/{{ item | basename | splitext | first }}"
    state: link
    force: yes
  with_fileglob:
    - "{{ symlink_dir_stat.stat.path }}/*.link"
  when: symlink_dir_stat.stat.exists and symlink_dir_stat.stat.isdir

- name: "{{ dir }}: Add VIRTUAL_ENV to .autoenv"
  when: python_version != ''
  lineinfile:
    path: "{{ root }}/{{ dir }}/.autoenv"
    state: present
    create: yes
    regexp: "^.+VIRTUAL_ENV="
    line: "export VIRTUAL_ENV={{ pyenv_root }}/versions/{{ env }}"

- name: "{{ dir }}: Add PYTHONWARNINGS to .autoenv"
  when: python_version != ''
  lineinfile:
    path: "{{ root }}/{{ dir }}/.autoenv"
    state: present
    create: yes
    regexp: "^.+PYTHONWARNINGS="
    line: "export PYTHONWARNINGS="

- name: "{{ dir }}: Add PYENV_VERSION to .autoenv (needed by PyCharm to run pre-commit hooks)"
  when: python_version != ''
  lineinfile:
    path: "{{ root }}/{{ dir }}/.autoenv"
    state: present
    create: yes
    regexp: "^.+PYENV_VERSION="
    line: "export PYENV_VERSION={{ env }}"

- name: "{{ dir }}: Source bash's .autoenv by default on .autoxsh"
  when: python_version != ''
  lineinfile:
    path: "{{ root }}/{{ dir }}/.autoxsh"
    state: present
    create: yes
    regexp: "source.+autoenv"
    line: "source-bash --interactive False ./.autoenv"

- name: "{{ dir }}: Link .autoenv to .envrc"
  when: python_version != ''
  file:
    src: "{{ root }}/{{ dir }}/.autoenv"
    dest: "{{ root }}/{{ dir }}/.envrc"
    state: link
    force: yes
    follow: false

- name: "{{ dir }}: Allow .envrc"
  when: python_version != ''
  command: "direnv allow {{ root }}/{{ dir }}"
  changed_when: false

- name: "{{ dir }}: Create .python-version manually, since pyenv local doesn't work on Ansible [hack]"
  when: python_version != ''
  lineinfile:
    path: "{{ root }}/{{ dir }}/.python-version"
    state: present
    create: yes
    regexp: '^(.+)$'
    line: "{{ env }}"

# TODO The installation doesn't seem to be working properly
# - name: "{{ dir }}: Install modules on the virtualenv {{ env }} with '{{ install_command }}'? {{ run_install_command }}"
#   when: run_install_command == 'yes' and python_version != '' and install_command != ''

#   shell: "source ~/.pyenv/versions/{{ env }}/bin/activate && {{ install_command }}"
# #   TODO pyenv commands are not working with the Ansible shell
# #   localhost failed | msg: non-zero return code | stderr:
# # Failed to activate virtualenv.
# # Perhaps pyenv-virtualenv has not been loaded into your shell properly.
# # Please restart current shell and try again.
# #   shell: "pyenv activate {{ env }} && {{ install_command }}"

#   # Installation might fail, that's acceptable
#   ignore_errors: true
#   args:
#     executable: /bin/bash
#     chdir: "{{ root }}/{{ dir }}"
