import time
import sys
from glob import glob
from pathlib import Path

# Set this variable to true if you want to debug this .xonshrc file
DEBUG = False

# https://xon.sh/envvars.html#shell-type
# $SHELL_TYPE = "readline"
$SHELL_TYPE = "prompt_toolkit2"

# https://xon.sh/tutorial_hist.html#sqlite-history-backend
# https://xon.sh/envvars.html#xonsh-history-backend
$XONSH_HISTORY_BACKEND = 'sqlite'

# https://xon.sh/envvars.html#xonsh-history-match-anywhere
$XONSH_HISTORY_MATCH_ANYWHERE = True

# Set an environment variable to suppress a warning message:
# Skipping application of 'll' alias from 'bash' since it shares a name with an existing xonsh alias.
# Use "--overwrite-alias" option to apply it anyway.You may prevent this message with "--suppress-skip-message" or "$FOREIGN_ALIASES_SUPPRESS_SKIP_MESSAGE = True".
$FOREIGN_ALIASES_SUPPRESS_SKIP_MESSAGE = True

def relative_to_home(full_path: str):
    path_obj = Path(full_path)
    return '~/{}'.format(path_obj.relative_to(path_obj.home()))

class Benchmark:

    stats = {}

    def __init__(self, message: str, show=False):
        self.message = message
        self.show = show
        self.start_time = None
        self.end_time = None
        self.seconds = None

    def start(self):
        self.start_time = time.time()

    def end(self, show=False):
        self.end_time = time.time()
        self.seconds = self.end_time - self.start_time
        self.stats[self.message] = self.seconds
        if show or self.show:
            self.print(self.message, self.seconds)

    @staticmethod
    def print(message, seconds):
        print(f"{message}: {seconds} seconds")

    def __enter__(self):
        self.start()

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.end()

    @classmethod
    def print_stats(cls):
        print('\nLoading times (slowest first):')
        for message, seconds in sorted(cls.stats.items(), key=lambda kv: kv[1], reverse=True):
            cls.print(message, seconds)

file_bench = Benchmark('.xonshrc')
file_bench.start()

# Debug variables and functions
if DEBUG:
    $XONSH_SHOW_TRACEBACK = True
def debug_print(message: str):
    if DEBUG:
        print('\n' + message)

# http://xon.sh/osx.html#path-helper
if sys.platform == 'darwin':
    source-bash $(/usr/libexec/path_helper -s)

xsh_config_files = set()

# http://xon.sh/tutorial.html#environment-types
for dotfile_dir in glob($HOME + '/dotfiles*'):
    # http://xon.sh/envvars.html#path
    $PATH.append(Path(dotfile_dir) / 'bin')

    # Source all .xsh scripts
    # Note: This environment variable is only needed for the globbing; I couldn't do it with Python variables.
    # http://xon.sh/tutorial.html#normal-globbing
    $ONE_DIR = dotfile_dir
    xsh_config_files.update(g`$ONE_DIR/**/*.xsh`)
    del $ONE_DIR

with Benchmark('All .xsh scripts'):
    for xsh_file in sorted(xsh_config_files):
        relative_path = relative_to_home(xsh_file)
        with Benchmark(f'Script {relative_path}'):
            debug_print(f'$$$ Sourcing xonsh script {relative_path}')

            # Using "source @(xsh_file)" instead of "evalx" was leading to this error most of the times:
            # Exception in thread Thread-21:
            # Traceback (most recent call last):
            #   File "/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py", line 917, in _bootstrap_inner
            #     self.run()
            #   File "/usr/local/Cellar/xonsh/0.8.7/libexec/lib/python3.7/site-packages/xonsh/__amalgam__.py", line 13364, in run
            #     io.open(self.c2pwrite, "wb", -1), encoding=enc, errors=err
            # OSError: [Errno 9] Bad file descriptor
            # It happened ramdonly with certain script files, maybe the ones which had aliases with functions
            evalx(f"source {xsh_file}")

# Load xontribs that were installed by this Ansible role (see "xontribs_install" and "xontribs_load" variables)
with Benchmark('Xontribs'):
    source ~/.xonsh_xontrib_load

# Load environment variables if they exist
test -f ~/.dotfiles.env && source-bash ~/.dotfiles.env

# http://xon.sh/tutorial.html#customizing-the-prompt
# http://xon.sh/envvars.html#xonsh-gitstatus
$PROMPT = '{env_name:{} }{BOLD_GREEN}{hostname}{BOLD_BLUE} {cwd}{branch_color}{gitstatus: {}}{NO_COLOR} {BOLD_BLUE}{ret_code_color}{ret_code}{NO_COLOR}\n{prompt_end} '

file_bench.end(not DEBUG)

if DEBUG:
    Benchmark.print_stats()
