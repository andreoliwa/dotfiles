import time
import sys
from pathlib import Path

# Set this variable to true if you want to debug this .xonshrc file
DEBUG = False

def relative_to_home(full_path: str):
    path_obj = Path(full_path)
    return '~/{}'.format(path_obj.relative_to(path_obj.home()))

class Benchmark:

    stats = {}

    def __init__(self, message: str, show=False):
        self.message = message
        self.show = show
        self.start_time = None
        self.end_time = None
        self.seconds = None

    def start(self):
        self.start_time = time.time()

    def end(self, show=False):
        self.end_time = time.time()
        self.seconds = self.end_time - self.start_time
        self.stats[self.message] = self.seconds
        if show or self.show:
            self.print(self.message, self.seconds)
    
    @staticmethod
    def print(message, seconds):
        print(f"{message}: {seconds} seconds")

    def __enter__(self):
        self.start()

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.end()

    @classmethod
    def print_stats(cls):
        print('\nLoading times (slowest first):')
        for message, seconds in sorted(cls.stats.items(), key=lambda kv: kv[1], reverse=True):
            cls.print(message, seconds)

file_bench = Benchmark(f'{relative_to_home(__file__)}')
file_bench.start()

# Debug variables and functions
if DEBUG:
    $XONSH_SHOW_TRACEBACK = True
def debug_print(message: str):
    if DEBUG:
        print('\n' + message)

# http://xon.sh/tutorial.html#environment-types
$DOTFILES = $HOME + '/dotfiles'
$DOTFILES_PRIVATE = $HOME + '/dotfiles_private'

with Benchmark('Set PATH'):
    # http://xon.sh/osx.html#path-helper
    if sys.platform == 'darwin':
        source-bash $(/usr/libexec/path_helper -s)

    # http://xon.sh/envvars.html#path
    $PATH.append(Path($DOTFILES) / 'bin')
    $PATH.append(Path($DOTFILES_PRIVATE) / 'bin')

# Source all .xsh scripts
# http://xon.sh/tutorial.html#normal-globbing
xsh_config_files = set(g`$DOTFILES/**/*.xsh` + g`$DOTFILES_PRIVATE/**/*.xsh`)

with Benchmark('All .xsh scripts'):
    for xsh_file in sorted(xsh_config_files):
        relative_path = relative_to_home(xsh_file)
        with Benchmark(f'Script {relative_path}'):
            debug_print(f'$$$ Sourcing xonsh script {relative_path}')
            source @(xsh_file)

# Load xontribs that were installed by this ansible role (see the "xontribs" variable)
with Benchmark('Xontribs'):
    source ~/.xonsh_xontrib_load

# http://xon.sh/tutorial.html#customizing-the-prompt
# http://xon.sh/envvars.html#xonsh-gitstatus
$PROMPT = '{env_name:{} }{BOLD_GREEN}{hostname}{BOLD_BLUE} {cwd}{branch_color}{gitstatus: {}}{NO_COLOR} {BOLD_BLUE}{ret_code_color}{ret_code}{NO_COLOR}\n{prompt_end} '

# Those environment variables are only needed for the globbing above; I couldn't do it with Python variables.
del $DOTFILES
del $DOTFILES_PRIVATE

file_bench.end(not DEBUG)

if DEBUG:
    Benchmark.print_stats()
