import sys
import time
from collections import defaultdict
from glob import glob
from pathlib import Path

DOTFILES_CACHE_DIR = Path("~/dotfiles/.cache/").expanduser()
DOTFILES_CACHE_DIR.mkdir(parents=True, exist_ok=True)

# https://xon.sh/envvars.html#shell-type
# $SHELL_TYPE = "readline"
$SHELL_TYPE = "prompt_toolkit2"

# https://xon.sh/tutorial_hist.html#sqlite-history-backend
# https://xon.sh/envvars.html#xonsh-history-backend
$XONSH_HISTORY_BACKEND = 'sqlite'

# https://xon.sh/envvars.html#xonsh-history-match-anywhere
$XONSH_HISTORY_MATCH_ANYWHERE = True

# Set an environment variable to suppress a warning message:
# Skipping application of 'll' alias from 'bash' since it shares a name with an existing xonsh alias.
# Use "--overwrite-alias" option to apply it anyway.
# You may prevent this message with "--suppress-skip-message" or:
$FOREIGN_ALIASES_SUPPRESS_SKIP_MESSAGE = True

def relative_to_home(full_path: str):
    path_obj = Path(full_path)
    return '~/{}'.format(path_obj.relative_to(path_obj.home()))

class Benchmark:

    stats = {}

    def __init__(self, message: str, show=False):
        self.message = message
        self.show = show
        self.start_time = None
        self.end_time = None
        self.seconds = None

    def start(self):
        self.start_time = time.time()

    def end(self, show=False):
        self.end_time = time.time()
        self.seconds = self.end_time - self.start_time
        self.stats[self.message] = self.seconds
        if show or self.show:
            self.print(self.message, self.seconds)

    @staticmethod
    def print(message, seconds):
        print(f"{message}: {seconds} seconds")

    def __enter__(self):
        self.start()

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.end()

    @classmethod
    def print_stats(cls):
        print('\nLoading times (slowest first):')
        for message, seconds in sorted(cls.stats.items(), key=lambda kv: kv[1], reverse=True):
            cls.print(message, seconds)


def _find_shell_files():
    shell_files = set()
    # http://xon.sh/tutorial.html#environment-types
    for dotfile_role_dir in glob($HOME + '/dotfiles*/roles'):
        # http://xon.sh/envvars.html#path
        $PATH.append(Path(dotfile_role_dir).parent / 'bin')

        # Source all .xsh scripts
        # Note: This environment variable is only needed for the globbing; I couldn't do it with Python variables.
        # http://xon.sh/tutorial.html#normal-globbing
        $ROLE_DIR = dotfile_role_dir
        shell_files.update(g`$ROLE_DIR/**/*.*sh`)
    return shell_files


def _parse_roles():
    """Parse the roles that are active in the Ansible playbook."""
    roles = set()

    with Benchmark('Parsing roles'):
        cache_roles = DOTFILES_CACHE_DIR / "roles"
        if cache_roles.exists():
            roles.update(cache_roles.read_text().split("\n"))
        else:
            playbook_path = Path("~/dotfiles/local_env.yml").expanduser()
            if playbook_path.exists():
                import yaml
                playbook_yml = yaml.load(playbook_path.read_text())
                roles = {item["role"] for item in playbook_yml[0]["roles"]}
            cache_roles.write_text("\n".join(sorted(roles)))
    return roles


def _choose_shell_scripts():
    with Benchmark('Choosing shell scripts'):
        chosen_scripts = set()
        not_loaded = set()

        cache_scripts = DOTFILES_CACHE_DIR / "scripts"
        if cache_scripts.exists():
            chosen_scripts.update(cache_scripts.read_text().split("\n"))
        else:
            import re
            role_regex = re.compile(r"roles/(?P<role>.+)/")

            mapping = defaultdict(set)
            shell_files = _find_shell_files()
            roles = _parse_roles()
            for shell_file in sorted(shell_files):
                shell_path = Path(shell_file)
                key = str(shell_path.parent / shell_path.stem)

                # Only source scripts that belong to roles defined in the playbook.
                match = role_regex.search(key)
                role_from_shell_file = match.groupdict().get("role")
                if role_from_shell_file in roles:
                    mapping[key].add(shell_path.suffix)
                else:
                    not_loaded.add(shell_file)
            if not_loaded:
                Path(DOTFILES_CACHE_DIR / "not_loaded").write_text("\n".join(sorted(not_loaded)))

            for parent_stem in sorted(mapping):
                script_partial_path = Path(parent_stem)
                suffixes = mapping[parent_stem]
                if ".xsh" in suffixes:
                    # Try a xonsh script first.
                    chosen_suffix = ".xsh"
                else:
                    # Or sort the other suffixes and get the first one.
                    chosen_suffix = list(sorted(suffixes)).pop()
                script_path = script_partial_path.with_suffix(chosen_suffix)
                chosen_scripts.add(str(script_path))
            cache_scripts.write_text("\n".join(sorted(chosen_scripts)))
    return chosen_scripts


def _main(debug):
    file_bench = Benchmark('.xonshrc')
    file_bench.start()

    if debug:
        $XONSH_SHOW_TRACEBACK = True
    def debug_print(message: str):
        if debug:
            print('\n' + message)

    # http://xon.sh/osx.html#path-helper
    if sys.platform == 'darwin':
        source-bash --interactive False $(/usr/libexec/path_helper -s)

    shell_files = _find_shell_files()
    roles = _parse_roles()
    chosen_scripts = _choose_shell_scripts()

    with Benchmark('Sourcing shell scripts'):
        for chosen_script in sorted(chosen_scripts):
            if not Path(chosen_script).exists():
                continue

            relative_path = relative_to_home(chosen_script)
            with Benchmark(f'Script {relative_path}'):
                debug_print(f'>>> Sourcing shell script {relative_path}')

                # Using "source @(chosen_script)" instead of "evalx" was leading to this error most of the times:
                # Exception in thread Thread-21:
                # Traceback (most recent call last):
                #   File "/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/lib/python3.7/threading.py", line 917, in _bootstrap_inner
                #     self.run()
                #   File "/usr/local/Cellar/xonsh/0.8.7/libexec/lib/python3.7/site-packages/xonsh/__amalgam__.py", line 13364, in run
                #     io.open(self.c2pwrite, "wb", -1), encoding=enc, errors=err
                # OSError: [Errno 9] Bad file descriptor
                # It happened ramdonly with certain script files, maybe the ones which had aliases with functions
                # EDIT: Using --interactive False almost eliminates the problem completely.
                # Suggestion taken from another issue:
                # https://github.com/xonsh/xonsh/issues/2790#issuecomment-416283371
                # Commented here:
                # https://github.com/xonsh/xonsh/issues/2496#issuecomment-471779854
                source_command = "source" if chosen_script.endswith(".xsh") else "source-bash --interactive False"
                evalx(f"{source_command} {chosen_script}")

    # Load xontribs that were installed by this Ansible role (see "xontribs_install" and "xontribs_load" variables)
    with Benchmark('Xontribs'):
        source ~/.xonsh_xontrib_load

    # Load environment variables if they exist
    test -f ~/.dotfiles.env && source-bash --interactive False ~/.dotfiles.env

    # http://xon.sh/tutorial.html#customizing-the-prompt
    # http://xon.sh/envvars.html#xonsh-gitstatus
    $PROMPT = '{env_name:{} }{BOLD_GREEN}{hostname}{BOLD_BLUE} {cwd}{branch_color}{gitstatus: {}}{NO_COLOR} {BOLD_BLUE}{ret_code_color}{ret_code}{NO_COLOR}\n{prompt_end} '

    file_bench.end(not debug)

    if debug:
        Benchmark.print_stats()

# Send True if you want to debug this .xonshrc file
_main(False)
